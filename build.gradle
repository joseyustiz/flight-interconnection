buildscript {
    repositories {
        maven { url 'https://repo.spring.io/release' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.springframework.cloud:spring-cloud-contract-gradle-plugin:3.0.4'
    }
}

plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'groovy'
    id 'org.springframework.experimental.aot' version '0.10.4'
    id 'org.graalvm.buildtools.native' version '0.9.3'
    id "info.solidsoft.pitest" version "1.7.0"
}

apply plugin: 'spring-cloud-contract'

group = 'com.joseyustiz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    maven { url 'https://repo.spring.io/release' }
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.4")
    set('testcontainersVersion', "1.16.0")
    set('groovyVersion', "3.0.9")
    set('spockVersion', "2.0-groovy-3.0")
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

sourceSets {
    contractTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
    compileOnly 'org.projectlombok:lombok'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testImplementation "org.spockframework:spock-bom:${spockVersion}"
    testImplementation "org.spockframework:spock-core"
    testImplementation "org.spockframework:spock-spring:${spockVersion}"

    integrationTestImplementation 'org.testcontainers:junit-jupiter'
    integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'

    contractTestImplementation 'io.rest-assured:spring-web-test-client'
    contractTestImplementation "org.codehaus.groovy:groovy-all:${groovyVersion}"
    contractTestImplementation "org.spockframework:spock-bom:${spockVersion}"
    contractTestImplementation "org.spockframework:spock-core:${spockVersion}"
    contractTestImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

contracts {
    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.SPOCK
    baseClassForTests = "com.joseyustiz.flightinterconnection.BaseContractSpec"
    testMode = "WEBTESTCLIENT"

}

contractTest {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    useJUnitPlatform()
}

bootBuildImage {
    builder = 'paketobuildpacks/builder:tiny'
    environment = ['BP_NATIVE_IMAGE': 'true']
}

nativeBuild {
    classpath processAotResources.outputs, compileAotJava.outputs
}

nativeTest {
    classpath processAotTestResources.outputs, compileAotTestJava.outputs
}

pitest {
    //adds dependency to org.pitest:pitest-junit5-plugin and sets "testPlugin" to "junit5"
    testSourceSets = [sourceSets.test, sourceSets.integrationTest, sourceSets.contractTest]
    junit5PluginVersion = '0.15'
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
}